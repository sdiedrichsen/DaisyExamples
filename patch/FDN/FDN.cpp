#include "daisy_patch.h"
#include "daisysp.h"

#include "Bandpass.h"
#include "Controller.h"
#include <string>

#ifndef M_PI
#define M_PI 3.14159265358979323846f /* pi */
#endif


using namespace daisy;
using namespace daisysp;

DaisyPatch hw;

#define MAX_DELAY static_cast<size_t>(24000 * 1.f)
static const int numDelays = 8;
DelayLine<float, MAX_DELAY> DSY_SDRAM_BSS delayLine[numDelays];
DelayLine<float, MAX_DELAY> DSY_SDRAM_BSS allpass  [numDelays];

static float allFDNMatrices[9][numDelays][numDelays] = 
{
 {{0.f,    1.f,    0.f,    0.f,    0.f,    0.f,    0.f,    0.f},
	{0.f,    0.f,    1.f,    0.f,    0.f,    0.f,    0.f,    0.f},
	{0.f,    0.f,    0.f,    1.f,    0.f,    0.f,    0.f,    0.f},
	{0.f,    0.f,    0.f,    0.f,    1.f,    0.f,    0.f,    0.f},
	{0.f,    0.f,    0.f,    0.f,    0.f,    1.f,    0.f,    0.f},
	{0.f,    0.f,    0.f,    0.f,    0.f,    0.f,    1.f,    0.f},
	{0.f,    0.f,    0.f,    0.f,    0.f,    0.f,    0.f,    1.f},
	{1.f,    0.f,    0.f,    0.f,    0.f,    0.f,    0.f,    0.f}},

 {{-0.628105461417329,  -0.292656509460283,  -0.147379079359634,  -0.449727003063211,   0.403356487968828, -0.309059034432540,   0.044016678846560,  -0.188969085629197},
  { 0.224642597135784,   0.081492879847899,  -0.779347821244983,   0.065440182975235,  -0.183438350907394, -0.535495496871193,  -0.095536784998754,   0.041192681609769},
  {-0.043552482817282,   0.515022004661332,   0.186632953301782,  -0.633447693777226,  -0.469084965532027, -0.165274745837993,   0.220321470783712,   0.029490319715915},
  { 0.258494147977788,  -0.098313829622474,   0.284232621577947,   0.170612538088672,  -0.057989720383666, -0.380236053765052,   0.226873866166685,  -0.783711891986880},
  { 0.099694723141108,   0.596015780132538,  -0.065434795613318,  -0.107325223961475,   0.443979217327564,  0.132048459910373,  -0.536669692754251,  -0.341258018998884},
  { 0.182748226820571,   0.244566982197953,  -0.280340670882294,  -0.016017906842183,   0.437450101673464,  0.233938473193925,   0.762792523219769,  -0.000614449163789},
  {-0.548340754780734,   0.466588054629145,   0.133778686484384,   0.585829457238152,   0.000500387479559, -0.297038541508689,   0.134147821793459,   0.119571444656659},
  {-0.377213008802390,   0.006750700199486,  -0.393073780447651,   0.090150741856475,  -0.437915534333870,  0.534262096470498,   0.032550305142204,  -0.465580385759067}},

 {{-0.223222582387220,   0.516354328652033,  -0.491236033942656,   0.502796478980739,   0.188485187429223, -0.312778635781977,   0.143309697272005,  -0.188515080196499},
  { 0.630206015514393,   0.305927424224855,   0.142488224341671,   0.109973746879396,   0.081363673035367, -0.129025052076842,  -0.648017082210740,  -0.183461221645674},
  {-0.376224374060661,  -0.298027968571564,  -0.253801175775683,   0.079098943627028,   0.524114572784505,  0.272225557515444,  -0.575884947099899,   0.136075562603309},
  { 0.069397412749435,   0.499826393217610,  -0.426145112864598,  -0.392502185576537,  -0.219213075668128,  0.351533968476212,  -0.090132646678128,   0.479526386460955},
  {-0.529924206576177,   0.369250862723359,   0.580213173659954,   0.041298617308693,  -0.136454457821528, -0.246522776571428,  -0.262337691916784,   0.310269028351880},
  {-0.252112395378988,   0.020848358128614,  -0.038350319929195,   0.228259858183616,  -0.596392581782298,  0.474534845187846,  -0.233713365537911,  -0.496932599081071},
  {-0.206687845160012,   0.298717552670221,   0.100007310123273,  -0.632362695578891,   0.347424077733316,  0.047780946630539,   0.052040747752824,  -0.576601395658649},
  { 0.139825198845522,   0.274092128762841,   0.379802626151303,   0.347988720718348,   0.374293211837769,  0.632138717569850,   0.305969907473711,   0.081632611015978}},

 {{ 0.028863976990228,  -0.247381712696069,   0.465418743056566,  -0.573004010950136,   0.505947946117824, -0.047090252472940,   0.327215206357283,   0.166584359326803},
  { 0.015340420052379,  -0.486498043186700,  -0.153664779059978,  -0.127761726296197,  -0.468090799003775, -0.169439454279070,   0.541998962513165,  -0.426106562158649},
  { 0.962970376818661,  -0.111536366930774,   0.130251486708646,   0.050528963868914,  -0.122068425941061,  0.109181109184614,  -0.096269991553519,   0.068117103240708},
  {-0.029926468922661,  -0.522870461681056,  -0.157088324311713,  -0.212779701601172,   0.163781554718574, -0.263226437608724,  -0.703670983943714,  -0.253955773598844},
  {-0.219353486380114,  -0.353676270682056,   0.633388936008385,   0.376241082737747,  -0.134363946204856,  0.472586472395817,  -0.134522039749235,  -0.156749557773722},
  { 0.101958056728719,   0.500578406671224,   0.275960313474952,  -0.139426873429241,   0.114222176416180, -0.081257931308364,  -0.054396759317013,  -0.787923410862501},
  { 0.106279716009035,  -0.191502426423636,  -0.153258087997311,   0.630046273129089,   0.624168827273203, -0.197014209514748,   0.265634704158300,  -0.180615544942449},
  { 0.030285752731304,  -0.062842949940193,  -0.466161621603066,  -0.222619530742346,   0.249990961566224,  0.786834597201932,   0.055942700948642,  -0.208647247507870}},
 
 {{-0.581014446033510,  -0.044300595678506,   0.599394659839957,   0.085922293845838,  -0.221087196886390, -0.468559266833467,   0.107403462946893,  -0.117644519136814},
  {-0.004789245519994,   0.268369389248000,  -0.408582504330480,   0.471561836833588,   0.221647598875295, -0.426874789436662,  -0.024873476039956,  -0.553783596258577},
  {-0.346845262777032,   0.255001232322770,  -0.293600076219067,  -0.335284301513704,   0.467633325790773, -0.291670240237838,   0.324297708344349,   0.455120541766345},
  {-0.335224573283455,   0.496191764480443,  -0.013335103837445,   0.476387132009565,  -0.113156281740292,  0.303473626190073,  -0.389465131375843,   0.397129726087348},
  { 0.434505007841243,   0.331848187372591,   0.023199246124401,  -0.258467475159248,  -0.350922576750891, -0.565404871409675,  -0.370335687246645,   0.231863522846414},
  { 0.057028694135626,   0.703824677401158,   0.228361009845388,  -0.323266899044849,  -0.083583921872773,  0.303292339329232,   0.312956060475520,  -0.384466255750588},
  { 0.200301761891639,   0.056730229477205,   0.519984051574283,  -0.000633181657001,   0.734937566440415, -0.013352960578445,  -0.380268376203686,  -0.036898568722859},
  { 0.444470984624364,   0.077927643330108,   0.253647746747778,   0.509489162224567,   0.015536034366271, -0.095995539004375,   0.592705372984180,   0.334215902285724}},

 {{ 0.333132421216561,   0.537794094519280,   0.239212807698604,   0.180290764355058,  -0.226101158982252, -0.626543079200262,  -0.250637079817989,   0.059798535009191},
  { 0.602675425278580,  -0.724951125199977,   0.095881659543469,   0.189232496198341,   0.082724931888014, -0.242243182453133,  -0.002220619114720,  -0.026379208330714},
  {-0.149158916126881,  -0.129023139688936,   0.207308343372911,  -0.611605040825429,  -0.186866846845918, -0.391792783341909,   0.309114001421108,  -0.509995002491262},
  {-0.564217046669560,  -0.316782793219677,  -0.096432120611137,   0.280788443888119,  -0.327003069112583, -0.433045789528441,   0.157324135283596,   0.417080250648069},
  { 0.057675154911380,  -0.185070928359916,   0.309015075793809,  -0.359332483247596,  -0.589900577000533,  0.310727014713409,  -0.460675322196567,   0.284704156095462},
  { 0.130456999093787,   0.076704889966852,   0.196612714449275,  -0.456217226664115,   0.413984085920085, -0.118967484073331,   0.283944775859246,   0.681282534969763},
  {-0.078687108627645,   0.046713857812387,   0.786866427144379,   0.376132027068174,  -0.044076715759571,  0.257521181059814,   0.398926861152391,  -0.059912622670352},
  {-0.398345014423704,  -0.160959610261954,   0.357774211145287,  -0.007357532074971,   0.528087450029842, -0.175242891211696,  -0.604056905337727,  -0.113514594761142}},

 {{ 0.255621486961645,   0.058845998723582,  -0.020973050092943,  -0.149378367501855,  -0.241085489961438, -0.621573518941912,   0.607501814761219,   0.308069359839750},
  {-0.052136671005243,  -0.205782400723017,  -0.755450480001289,   0.242998290536675,  -0.466021984148854,  0.158420047605915,   0.170394800371912,  -0.232107701216398},
  { 0.594057759029941,  -0.579193912807615,  -0.006628567198060,  -0.377173853746771,   0.202233899238252,  0.044377845708960,   0.018906511108369,  -0.355106092733523},
  {-0.508425764734724,  -0.356205925502670,  -0.400545950391843,  -0.305886248807563,   0.472304181997608, -0.210874206081571,  -0.023195974176149,   0.304203715402822},
  { 0.241246301618175,   0.370861587265811,  -0.258309877078655,  -0.501487355184490,  -0.010792441608338,  0.559684213487910,   0.093358734592132,   0.404931594336400},
  { 0.202700967974076,  -0.431116967520153,   0.080928534799620,   0.170930058674943,  -0.356532950497692,  0.001366113979567,  -0.459230815259858,   0.631880853051374},
  { 0.203174045826530,  -0.140296012310258,  -0.002180181913392,   0.603017202606591,   0.483519388188662,  0.291442415405633,   0.432952222381259,   0.263107447790809},
  {-0.424229761179774,  -0.385693368269456,   0.441696200598147,  -0.196150508413690,  -0.315766189047663,  0.379374694061097,   0.440403480701527,   0.010512343928502}},

 {{ 0.288695774203914,   0.223722824254156,   0.369109416957532,   0.124014050945552,  -0.161961452144790,   0.010847382602033,  -0.671754015389510,   0.487215523627681},
  {-0.205256445418021,  -0.368082164671593,  -0.506142342126678,   0.224015873679281,   0.219599918001242,  -0.545682044584540,  -0.329657036661643,   0.247700120958008},
  {-0.256633749006202,  -0.465587384163677,   0.303516201485328,   0.122842192338504,  -0.738562548331151,  -0.176371817638457,   0.161752587920285,   0.086079394994548},
  {-0.347838598329304,   0.406465044034948,   0.414470705784700,  -0.171639102056134,   0.113488340455070,  -0.644146702544042,  -0.062105706887714,  -0.284406106713691},
  { 0.136489391914637,  -0.353972606905297,   0.401274556578717,  -0.328885898336907,   0.450176242743948,  -0.124750377420315,   0.349895521335453,   0.496224398357178},
  { 0.764447389104502,  -0.151746851577838,  -0.113826546413342,  -0.274818531065911,  -0.205786596507134,  -0.405672513288411,  -0.017959553809096,  -0.311240289373278},
  { 0.199417126484059,   0.479184516051008,  -0.175872896093276,   0.407360429191523,  -0.147825046061393,  -0.275353755557184,   0.535404164502252,   0.386538044804922},
  {-0.211885853245120,   0.233530854101882,  -0.372506495642654,  -0.735019414384012,  -0.316750857520935,   0.011353970652305,  -0.025391370002767,   0.347056705019812}},
 
 {{-0.275638490431966,   0.289567149272008,  -0.558975166408825,  -0.054927514218832, -0.177010192872689,  0.122884597530897,  -0.399168827790987,   0.564743334979394},
  {-0.829950720131969,  -0.135857561095072,   0.215357720002888,   0.067229943510486,  0.002126234505129, -0.421473615691133,  -0.195288715154303,  -0.161379987956729},
  { 0.169145019090933,  -0.381314372963557,  -0.361711183005342,  -0.148035718967965,  0.615285372137492, -0.499707476671310,   0.006626020618788,   0.211924991281894},
  {-0.077427569855029,  -0.809572958933137,  -0.109196760252240,  -0.042291952509737, -0.467892917090907,  0.193190683159348,   0.171760724646869,   0.197827918755892},
  {-0.053298242268048,  -0.223781186964442,  -0.190781384385771,   0.695445523201294,  0.346617050876921,  0.413595922026531,  -0.294312504178059,  -0.221843297333723},
  { 0.109545631820195,   0.121258416780033,  -0.561848089795487,   0.291677973707985, -0.409434196183121, -0.421254633378260,   0.195201744551023,  -0.435145132494143},
  {-0.383336697120369,   0.172271515540085,  -0.156523895459584,   0.140725587234188,  0.244613649699592,  0.200338295467916,   0.803236769692651,   0.184150759937312},
  {-0.197008089298341,  -0.049248999439014,  -0.349053521580636,  -0.616632558782249,  0.153451689901756,  0.362734998551988,  -0.055389841986459,  -0.546348003037977}},
}; 

static float DSY_SDRAM_BSS fdnMatrix[numDelays][numDelays];

static float delayTimes[numDelays]  // ms
{
	 19.f,   // L  
	 17.f,   // 	R
	 23.f,   // L 
	 50.f,   //   R 
	147.f,   // L
	111.f,   //   R
	 73.f,   // L 
	 47.f,   // 	R
};

static float allpassTimes[numDelays]  // ms
{
	  5.2f,
	 17.3f,
	 11.4f,
	 14.5f,
	 50.6f,
	 30.7f,
	 23.8f,
	 13.9f,
};
float allpassFrames[numDelays];



Bandpass  DSY_SDRAM_BSS bandPass[numDelays];

enum eCtrsl
{
	eMix,
	eTime,
	eDiffusion,
	eHiCut, 
	eLoCut,
	eSize,
	eNumControls
};


Controller DSY_SDRAM_BSS ctrl[eNumControls];
Controller DSY_SDRAM_BSS MenuCtrl;

char menuState = 0; // 0: selection 1: valuew

void AudioCallback(float **in, float **out, size_t size)
{
	hw.ProcessDigitalControls();
	if(hw.encoder.RisingEdge() == true)
	{
		menuState = 1 - menuState; // toggle
	}
	int i = hw.encoder.Increment();
	int menuIdx = MenuCtrl.Value();

	if(menuState == 0)
		MenuCtrl.ChangeValue(i);
	
	else
		ctrl[menuIdx].ChangeValue(i);


	for (size_t i = 0; i < size; i++)
	{
	 	out[2][i] = 0.f;
	 	out[3][i] = 0.f;

		float input = in[0][i];

		float delayOut[numDelays];
		float delayIn [numDelays];

		float feedback = ctrl[eTime].Value();
		for(int o = 0; o < numDelays; ++o)
			delayOut[o] = delayLine[o].Read() * feedback;
		
	

		for(int k = 0; k < numDelays; ++k)
		{		
			float delayInput = 0.0f;
			float* fdnMatrixR = fdnMatrix[k]; 
			for(int o = 0; o < numDelays; ++o)
			{
				delayInput += fdnMatrixR[o] * delayOut[o];
			}
			delayIn[k] = delayInput;
		}

		delayIn[0] += input;
		delayIn[4] += input;

		const float apg = ctrl[eDiffusion].Value();

		for(int o = 0; o < numDelays; ++o)
		{	
			float x = delayIn[o];
			x = bandPass[o].Process(x);
			x = allpass[o].Allpass(x, allpassFrames[o], apg);
			delayLine[o].Write(x);
		}

		float wet = ctrl[eMix].Value() * 2e-3f;
		out[0][i] = input + wet * (		delayOut[0] 
																+ delayOut[2]
																+ delayOut[4]
																+ delayOut[6]);
		out[1][i] = input + wet * (		delayOut[1] 
																+ delayOut[3]
																+ delayOut[5]
																+ delayOut[7]);
	}
}

void UpdateDisplay()
{
	int menuIdx = MenuCtrl.Value();

	bool valueChanged = MenuCtrl.ValueHasChanged();
	valueChanged |= ctrl[menuIdx].ValueHasChanged();

	if(!valueChanged)
		return;

  hw.display.Fill(false);

	hw.display.SetCursor(0, 0);
	const char*   cstr = "FD Network";
	hw.display.WriteString(cstr, Font_7x10, true);

	if(menuState == 0)
		hw.display.SetCursor(0, 20);
	else
		hw.display.SetCursor(0, 35);
	hw.display.WriteString(">", Font_7x10, true);
	
	hw.display.SetCursor(10, 20);
	hw.display.WriteString(ctrl[menuIdx].Name(), Font_7x10, true);

	hw.display.SetCursor(10, 35);
	std::string valueStr = "123456789ABCDEF";
	const char* str = ctrl[menuIdx].ValueString(valueStr);
	hw.display.WriteString(str, Font_7x10, true);

	hw.display.Update();
}

void InitDelayNetwork()
{

	for(int j = 0; j < numDelays; ++j)
	{
		for(int k = 0; k < numDelays; ++k)
			fdnMatrix[j][k] = allFDNMatrices[2][j][k];
	}

	float sampleRate = hw.AudioSampleRate();
	for(int i = 0; i < numDelays; ++i)
	{
		delayLine[i].Init();
		delayLine[i].SetDelay(sampleRate * 1e-3f * delayTimes[i]);

		allpass[i].Init();
		allpassFrames[i] = allpassTimes[i] * 1e-3f * sampleRate;

		bandPass[i].Init();
		bandPass[i].SetHighCut(12e3f / sampleRate, -0.0f);
		bandPass[i].SetLowCut(20.f / sampleRate);

	}
}

void SetHighCut(float freq)
{
	float sampleRate = hw.AudioSampleRate();
	float normFreq = freq / sampleRate;
	for(int i = 0; i < numDelays; ++i)
		bandPass[i].SetHighCut(normFreq, -0.0f);
}

void SetLowCut(float freq)
{
	float sampleRate = hw.AudioSampleRate();
	float normFreq = freq / sampleRate;
	for(int i = 0; i < numDelays; ++i)
		bandPass[i].SetLowCut(normFreq);
}

void SetSize(float size)
{
	float sampleRate = hw.AudioSampleRate();
	size *= sampleRate * 1e-5f;  // [ms] * [%]
	for(int i = 0; i < numDelays; ++i)
		delayLine[i].SetDelay(size * delayTimes[i]);
}


int main(void)
{
	hw.Init();

	// initialize delays

	InitDelayNetwork();


	// initialize controller

	
	ctrl[eMix				].Init("Mix", 		 "%", 0.f,  100.f, 100, eLinear, 		    50.f, 0);
	ctrl[eTime			].Init("Time", 		 "?", 0.7,    1.f, 200, eLinear, 			  0.9f, 3);
	ctrl[eDiffusion	].Init("Diffusion","",  0.f,    1.0, 100, eLinear, 			  0.5f, 2);
	ctrl[eHiCut			].Init("High Cut", "Hz",1e3f,  2e4f, 100, eLogarithmic,  12e3f, 0);
	ctrl[eLoCut			].Init("Low Cut",  "Hz",10.f,  1e3f, 100, eLogarithmic,   20.f, 1);
	ctrl[eSize			].Init("Size", 		 "%", 50.f, 200.f, 100, eLogarithmic,  100.f, 1);
	MenuCtrl.Init					("Selection", "",  0.f, eNumControls -1, eNumControls, eLinear,  0.f, 0);

	ctrl[eHiCut].SetUpdateCallback(SetHighCut);
	ctrl[eLoCut].SetUpdateCallback(SetLowCut);
  ctrl[eSize ].SetUpdateCallback(SetSize);

	hw.StartAdc();
	hw.StartAudio(AudioCallback);
	while(1) 
	{
		UpdateDisplay();
	}
}
